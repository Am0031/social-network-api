{
	"info": {
		"_postman_id": "20ede1b0-2f7e-48c6-abc7-9d8ebec5360f",
		"name": "social-network",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9645754"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "GET All users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var count = response.data.length;\r",
									"pm.collectionVariables.set(\"userCount\", count);\r",
									"\r",
									"var friendId = response.data[0]._id;\r",
									"pm.collectionVariables.set(\"friendId\", friendId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:4000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var id = response.id;\r",
									"var originalFriendCount = 0;\r",
									"pm.collectionVariables.set(\"userId\", id);\r",
									"pm.collectionVariables.set(\"originalFriendCount\", originalFriendCount);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomExampleEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE User By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/api/users/{{userId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE Friend For User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var friendId = response.friendId;\r",
									"pm.collectionVariables.set(\"friendId\", friendId);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"friendId\": \"{{friendId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/api/users/{{userId}}/friends",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"users",
								"{{userId}}",
								"friends"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check friend is created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"pm.test(\"User friend count is up by 1\", ()=> {\r",
									"var newFriendCount = response.data.friendCount;\r",
									"var originalFriendCount = pm.collectionVariables.get(\"originalFriendCount\");\r",
									"pm.expect(newFriendCount).to.eql(originalFriendCount+1);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:4000/api/users/{{userId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Friend For User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/users/{{userId}}/friends/{{friendId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"users",
								"{{userId}}",
								"friends",
								"{{friendId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check friend is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var friendCount =  pm.collectionVariables.get(\"friendCount\");\r",
									"\r",
									"pm.test(\"User friend count equals original count\", ()=> {\r",
									"var newFriendCount = response.data.friendCount;\r",
									"var originalFriendCount = pm.collectionVariables.get(\"originalFriendCount\");\r",
									"pm.expect(newFriendCount).to.eql(originalFriendCount);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:4000/api/users/{{userId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE User By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/users/{{userId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check user is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"User count is initial value\", ()=> {\r",
									"var count = response.data.length;\r",
									"var originalCount = pm.collectionVariables.get(\"userCount\");\r",
									"pm.expect(count).to.eql(originalCount);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:4000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Thoughts",
			"item": [
				{
					"name": "GET All users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var selectedUser = response.data[0];\r",
									"var selectedUsername = selectedUser.username;\r",
									"var userThoughtCount = selectedUser.thoughts.length;\r",
									"pm.collectionVariables.set(\"selectedUsername\", selectedUsername);\r",
									"pm.collectionVariables.set(\"userThoughtCount\", userThoughtCount);\r",
									"\r",
									"var reactingUser = response.data[1];\r",
									"var reactingUsername = reactingUser.username;\r",
									"pm.collectionVariables.set(\"reactingUsername\", reactingUsername);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:4000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET All Thoughts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var count = response.data.length;\r",
									"pm.collectionVariables.set(\"thoughtCount\", count);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/thoughts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"thoughts"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE Thought",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var id = response.id;\r",
									"pm.collectionVariables.set(\"thoughtId\", id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{selectedUsername}}\",\r\n    \"thoughtText\": \"{{$randomLoremSentences}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/api/thoughts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"thoughts"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE Thought By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"thoughtText\": \"{{$randomLoremSentences}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/api/thoughts/{{thoughtId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"thoughts",
								"{{thoughtId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE Reaction For Thought",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var reactionId = response.reactionId;\r",
									"pm.collectionVariables.set(\"reactionId\", reactionId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{reactingUsername}}\",\r\n    \"reactionBody\": \"{{$randomLoremSentences}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/api/thoughts/{{thoughtId}}/reactions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"thoughts",
								"{{thoughtId}}",
								"reactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check reaction is created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Reaction count equals 1\", ()=> {\r",
									"var count = response.data.reactionCount;\r",
									"var originalCount = 0;\r",
									"pm.expect(count).to.eql(originalCount+1);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/thoughts/{{thoughtId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"thoughts",
								"{{thoughtId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Reaction For Thought",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/thoughts/{{thoughtId}}/reactions/{{reactionId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"thoughts",
								"{{thoughtId}}",
								"reactions",
								"{{reactionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check reaction is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Reaction count equals 0\", ()=> {\r",
									"var count = response.data.reactionCount;\r",
									"var originalCount = 0;\r",
									"pm.expect(count).to.eql(originalCount);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/thoughts/{{thoughtId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"thoughts",
								"{{thoughtId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Thought By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/thoughts/{{thoughtId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"thoughts",
								"{{thoughtId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check thought is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Thought count is initial value\", ()=> {\r",
									"var count = response.data.length;\r",
									"var originalCount = pm.collectionVariables.get(\"thoughtCount\");\r",
									"pm.expect(count).to.eql(originalCount);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/thoughts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"thoughts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cascade deletions",
			"item": [
				{
					"name": "GET All users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"var users = response.data;\r",
									"pm.collectionVariables.set(\"overallUserCount\", users.length);\r",
									"\r",
									"for(var i=0; i<users.length; i+=1 ){\r",
									"    var currentUser = response.data[i];\r",
									"    if(currentUser.thoughtCount > 0){\r",
									"        pm.collectionVariables.set(\"demoCascadeUserId\", currentUser._id);\r",
									"        pm.collectionVariables.set(\"userThoughtCount\", currentUser.thoughtCount);   \r",
									"        break;\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:4000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET All Thoughts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var count = response.data.length;\r",
									"pm.collectionVariables.set(\"overallThoughtCount\", count);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/thoughts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"thoughts"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/users/{{demoCascadeUserId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"users",
								"{{demoCascadeUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check user is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"User count is initial value - 1\", ()=> {\r",
									"var count = response.data.length;\r",
									"var overallUserCount = pm.collectionVariables.get(\"overallUserCount\");\r",
									"pm.expect(count).to.eql(overallUserCount-1);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:4000/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check associated thoughts are deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Thought count is decreased by number of user's thoughts\", ()=> {\r",
									"var count = response.data.length;\r",
									"var originalCount = pm.collectionVariables.get(\"overallThoughtCount\");\r",
									"var userThoughtCount = pm.collectionVariables.get(\"userThoughtCount\");\r",
									"pm.expect(count).to.eql(originalCount-userThoughtCount);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/thoughts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"thoughts"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "newUserId",
			"value": ""
		},
		{
			"key": "userCount",
			"value": ""
		},
		{
			"key": "userThoughtCount",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "thoughtId",
			"value": ""
		},
		{
			"key": "thoughtCount",
			"value": ""
		},
		{
			"key": "demoCascadeUserId",
			"value": ""
		},
		{
			"key": "overallThoughtCount",
			"value": ""
		},
		{
			"key": "overallUserCount",
			"value": ""
		},
		{
			"key": "friendId",
			"value": ""
		},
		{
			"key": "originalFriendCount",
			"value": ""
		},
		{
			"key": "selectedUsername",
			"value": ""
		},
		{
			"key": "reactingUsername",
			"value": ""
		},
		{
			"key": "reactionId",
			"value": ""
		}
	]
}